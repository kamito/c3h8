// Code generated by go-bindata.
// sources:
// assets/templates/index.html
// assets/templates/layouts.html
// assets/templates/page.html
// DO NOT EDIT!

package propane

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTemplatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\xaa\xad\xe5\xb2\x49\xc9\x2c\x53\xc8\x4c\xb1\x55\xca\x4d\xcc\xcc\x53\xb2\xe3\x52\x50\xa8\xae\xd6\x73\xca\x4f\xa9\x04\xc9\xe9\x03\x25\xed\xb8\xaa\xab\x53\xf3\x52\x80\x5c\x40\x00\x00\x00\xff\xff\xb2\x0e\x05\x71\x40\x00\x00\x00")

func assetsTemplatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesIndexHtml,
		"assets/templates/index.html",
	)
}

func assetsTemplatesIndexHtml() (*asset, error) {
	bytes, err := assetsTemplatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/index.html", size: 64, mode: os.FileMode(420), modTime: time.Unix(1435920029, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsTemplatesLayoutsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\xcd\x31\x0e\xc2\x30\x0c\x85\xe1\x9d\x53\x98\x1c\x80\x0e\x2c\x0c\x56\x17\x16\xae\x11\x6a\xa3\x56\x4a\x93\x4a\x3c\x86\xc8\xca\xdd\x49\x6b\x75\xca\x2f\xe5\xb3\x9e\x99\xe8\x67\xc9\x4a\x21\xc5\x5a\x7e\xf8\x86\xd6\xf8\x2a\x65\x42\xdd\x94\x66\xac\x69\xbc\xb0\x3f\x44\x3c\x6b\x94\x3d\x7a\x62\x41\xd2\xf1\x79\x7f\x3d\x78\xf0\xde\xc1\x70\x0a\x7e\x17\xa9\x4e\xcd\xa0\xeb\x96\x22\xfa\xc8\x54\x32\x34\x23\xd0\xad\xb5\xc3\x3b\xeb\x77\xc7\x84\x99\x66\xe9\x3f\xff\x00\x00\x00\xff\xff\x5f\x83\xa1\x18\x96\x00\x00\x00")

func assetsTemplatesLayoutsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesLayoutsHtml,
		"assets/templates/layouts.html",
	)
}

func assetsTemplatesLayoutsHtml() (*asset, error) {
	bytes, err := assetsTemplatesLayoutsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/layouts.html", size: 150, mode: os.FileMode(420), modTime: time.Unix(1435920003, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsTemplatesPageHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\xaa\xad\xe5\xb2\x49\xc9\x2c\x53\xc8\x4c\xb1\x55\xca\x4d\xcc\xcc\x53\xb2\xe3\x52\x50\xb0\xc9\x30\xb4\xab\xae\xd6\x0b\xc9\x2c\xc9\x49\xad\xad\xb5\xd1\x07\x72\x41\xa2\x30\x75\x30\xbd\x20\x41\x05\x05\xa0\x42\xa7\xfc\x94\xca\x9a\x8c\x92\xdc\x9c\xe2\xc4\x34\xa0\x06\x90\x5a\x7d\xa0\x62\x3b\x2e\x28\x55\x5d\x9d\x9a\x97\x02\x14\x07\x04\x00\x00\xff\xff\x92\xe4\x91\xd0\x7f\x00\x00\x00")

func assetsTemplatesPageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesPageHtml,
		"assets/templates/page.html",
	)
}

func assetsTemplatesPageHtml() (*asset, error) {
	bytes, err := assetsTemplatesPageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/page.html", size: 127, mode: os.FileMode(420), modTime: time.Unix(1435993502, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/templates/index.html": assetsTemplatesIndexHtml,
	"assets/templates/layouts.html": assetsTemplatesLayoutsHtml,
	"assets/templates/page.html": assetsTemplatesPageHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{assetsTemplatesIndexHtml, map[string]*bintree{
			}},
			"layouts.html": &bintree{assetsTemplatesLayoutsHtml, map[string]*bintree{
			}},
			"page.html": &bintree{assetsTemplatesPageHtml, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

